{"ast":null,"code":"import _asyncToGenerator from \"/home/meghna/mogi/kube-mogi/cheeta/frontend/cheeta/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst TICKET_BASE_URL = environment.ticketUrl;\nexport let CheetaTicketService = /*#__PURE__*/(() => {\n  class CheetaTicketService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.ticketUpdated = new Subject(); //function used in home page forshowing all ticketsummary table\n\n      this.ticketSummary = [];\n      this.cacheTime = 5000;\n    }\n\n    getTicketUpdateListener() {\n      return this.ticketUpdated.asObservable();\n    } //this ir to create a ticket from create option\n\n\n    addTicket(ticket) {\n      var _this = this;\n\n      return new Promise((resolve, reject) => {\n        try {\n          this.http.post(TICKET_BASE_URL + 'createTicket', ticket).subscribe( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator(function* (res) {\n              _this.ticketUpdated.next(1);\n\n              resolve(res);\n            });\n\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        } catch (err) {}\n      });\n    } //this is for getting all tickets from backend to kan ban page\n\n\n    getTickets(filters) {\n      return new Promise((resolve, reject) => {\n        try {\n          this.http.post(TICKET_BASE_URL + \"getTickets\", filters).subscribe( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (res) {\n              if (res.data && res.data.length) {\n                resolve(res.data);\n              } else resolve([]);\n            });\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    } //changes state of a ticket in kanban saction from backlog to development or deployment or done\n\n\n    updateTicketState(ticket, state) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          try {\n            _this2.http.put(TICKET_BASE_URL + 'changeTicketState/' + ticket._id, {\n              state\n            }).subscribe(res => {\n              // console.log(res);\n              if (res) resolve(res);\n            });\n          } catch (err) {\n            console.log(err);\n          }\n        });\n      })();\n    } //function to delete tickets\n\n\n    deleteTicket(eventId) {\n      var _this3 = this;\n\n      console.log(eventId);\n      return new Promise((resolve, reject) => {\n        try {\n          this.http.delete(TICKET_BASE_URL + 'deleteTicket/' + eventId).subscribe( /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator(function* (res) {\n              _this3.ticketUpdated.next(1);\n\n              resolve(res);\n            });\n\n            return function (_x3) {\n              return _ref3.apply(this, arguments);\n            };\n          }());\n        } catch (err) {\n          reject(err);\n        }\n      });\n    } //function to update ticket details\n\n\n    updateTicket(id, ticket) {\n      var _this4 = this;\n\n      return new Promise((resolve, reject) => {\n        this.http.put(TICKET_BASE_URL + 'updateTicket/' + id, ticket).subscribe( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (res) {\n            _this4.ticketUpdated.next(1);\n\n            resolve(res);\n          });\n\n          return function (_x4) {\n            return _ref4.apply(this, arguments);\n          };\n        }(), err => {\n          reject(err);\n        });\n      });\n    }\n\n    getTicketSummary() {\n      return new Promise((resolve, reject) => {\n        // return resolve(aa)\n        try {\n          if (this.ticketSummary.length > 0) return resolve(this.ticketSummary);\n          this.ticketSummary = [];\n          this.http.get(TICKET_BASE_URL + 'getTicketSummary').subscribe(res => {\n            if (res && res['data']) {\n              // console.log(res);\n              let t;\n              t = res['data'];\n\n              for (let i = 0; i < t.length; i++) {\n                let obj = {};\n                obj['project'] = Object.keys(t[i])[0];\n                obj['backlog'] = [0, 0, 0, 0];\n                obj['development'] = [0, 0, 0, 0];\n                obj['testing'] = [0, 0, 0, 0];\n                obj['done'] = [0, 0, 0, 0];\n\n                for (let j = 0; j < t[i][obj['project']].length; j++) {\n                  let a = t[i][obj['project']];\n\n                  if (a[j]._id == \"backlog\") {\n                    let count = a[j].ticketsCount;\n\n                    for (let k = 0; k < count.length; k++) {\n                      if (count[k].priority == 'P0') obj['backlog'][0] = count[k].count;\n                      if (count[k].priority == 'P1') obj['backlog'][1] = count[k].count;\n                      if (count[k].priority == 'P2') obj['backlog'][2] = count[k].count;\n                      if (count[k].priority == 'P3') obj['backlog'][3] = count[k].count;\n                    }\n                  }\n\n                  if (a[j]._id == \"development\") {\n                    let count = a[j].ticketsCount;\n\n                    for (let k = 0; k < count.length; k++) {\n                      if (count[k].priority == 'P0') obj['development'][0] = count[k].count;\n                      if (count[k].priority == 'P1') obj['development'][1] = count[k].count;\n                      if (count[k].priority == 'P2') obj['development'][2] = count[k].count;\n                      if (count[k].priority == 'P3') obj['development'][3] = count[k].count;\n                    }\n                  }\n\n                  if (a[j]._id == \"testing\") {\n                    let count = a[j].ticketsCount;\n\n                    for (let k = 0; k < count.length; k++) {\n                      if (count[k].priority == 'P0') obj['testing'][0] = count[k].count;\n                      if (count[k].priority == 'P1') obj['testing'][1] = count[k].count;\n                      if (count[k].priority == 'P2') obj['testing'][2] = count[k].count;\n                      if (count[k].priority == 'P3') obj['testing'][3] = count[k].count;\n                    }\n                  }\n\n                  if (a[j]._id == \"done\") {\n                    let count = a[j].ticketsCount;\n\n                    for (let k = 0; k < count.length; k++) {\n                      if (count[k].priority == 'P0') obj['done'][0] = count[k].count;\n                      if (count[k].priority == 'P1') obj['done'][1] = count[k].count;\n                      if (count[k].priority == 'P2') obj['done'][2] = count[k].count;\n                      if (count[k].priority == 'P3') obj['done'][3] = count[k].count;\n                    }\n                  }\n                }\n\n                this.ticketSummary.push(obj);\n              } // console.log(this.ticketSummary)\n\n\n              setTimeout(() => {\n                this.ticketSummary = [];\n              }, this.cacheTime);\n              return resolve(this.ticketSummary);\n            }\n\n            reject(new Error(\"data is not there\"));\n          }, error => {\n            reject(error);\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    }\n\n  }\n\n  CheetaTicketService.ɵfac = function CheetaTicketService_Factory(t) {\n    return new (t || CheetaTicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  CheetaTicketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CheetaTicketService,\n    factory: CheetaTicketService.ɵfac,\n    providedIn: 'root'\n  });\n  return CheetaTicketService;\n})();","map":null,"metadata":{},"sourceType":"module"}