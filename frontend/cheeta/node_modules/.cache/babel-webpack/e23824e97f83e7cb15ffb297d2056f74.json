{"ast":null,"code":"import { HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FileUploaderService = /*#__PURE__*/(() => {\n  class FileUploaderService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getpresignedurls(folder, fileName, fileType) {\n      // console.log(fileName, fileType);\n      // Remove special character and spaces\n      fileName = fileName.replace(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,<>\\/?]+/g, \"\");\n      fileName = fileName.replace(/\\s/g, '');\n      const timestamp = Date.now();\n      const humanReadableDateTime = new Date(timestamp).toLocaleString();\n      const mogiDT = humanReadableDateTime.replace(/[^0-9 ]/g, \"a\").replace(/ /g, \"\");\n      fileName = mogiDT + \"\" + fileName;\n      let getheaders = new HttpHeaders().set('Accept', 'application/json');\n      return this.http.post(environment.apiURL + 'file-upload/gcpStorageSignedURL', {\n        \"fileName\": folder + '/' + fileName,\n        \"contentType\": fileType\n      }, {\n        headers: getheaders\n      });\n    }\n\n    uploadFile(folder, fileObj) {\n      return new Promise(resolve => {\n        if (!fileObj) {\n          return resolve(\"\");\n        }\n\n        this.getpresignedurls(folder, fileObj.name, fileObj.type).subscribe(res => {\n          // console.log(\"hree\",res);\n          if (res.status.code == 200) {\n            const fileuploadurl = res.data.signedUrl;\n            this.uploadFileByPut(fileuploadurl, fileObj.type, fileObj).subscribe(event => {\n              resolve(res.data.fileUrl);\n            });\n          }\n        });\n      });\n    }\n\n    uploadFileByPut(fileuploadurl, contentType, file) {\n      const headers = new HttpHeaders({\n        'Content-Type': contentType\n      });\n      const req = new HttpRequest('PUT', fileuploadurl, file, {\n        headers: headers\n      });\n      return this.http.request(req);\n    }\n\n  }\n\n  FileUploaderService.ɵfac = function FileUploaderService_Factory(t) {\n    return new (t || FileUploaderService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FileUploaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileUploaderService,\n    factory: FileUploaderService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileUploaderService;\n})();","map":null,"metadata":{},"sourceType":"module"}