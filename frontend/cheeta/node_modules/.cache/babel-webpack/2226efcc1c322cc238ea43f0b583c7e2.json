{"ast":null,"code":"import _asyncToGenerator from \"/home/meghna/mogi/kube-mogi/cheeta/frontend/cheeta/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Subject } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst usersURL = environment.cheetaUserURL;\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.token = null;\n      this.tokenTimer = null;\n      this.authStatusListener = new Subject();\n      this.authStatus = false;\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    getAuthStatusListener() {\n      return this.authStatusListener.asObservable();\n    }\n\n    getAuthStatus() {\n      return this.authStatus;\n    }\n\n    register(regData) {\n      console.log(\"api url\", usersURL);\n      this.http.post(usersURL, regData).subscribe(resp => {\n        console.log(\"lolz ::: new resopnse\", resp);\n        console.log(\"userId::\", resp.data.userId);\n\n        if (resp && resp.status && resp.status.code == 200) {\n          this.router.navigate(['/auth/verifyOTP'], {\n            queryParams: {\n              email: resp.data.email,\n              userId: resp.data.userId\n            }\n          });\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    verifyOtp(otpData) {\n      console.log('verfying otp', otpData);\n      this.http.post(usersURL + \"/verifyOTP\", otpData).subscribe(resp => {\n        console.log(\"lolz ::: new resopnse\", resp);\n        if (resp && resp.status && resp.status.code == 200) this.router.navigate(['/auth/login']);\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    autoAuthUser() {\n      const authInfo = this.getAuthData();\n\n      if (authInfo) {\n        let expiresIn = new Date(authInfo.expirationDate).getTime() - new Date().getTime();\n\n        if (expiresIn > 0) {\n          this.token = authInfo.token;\n          this.authStatus = true;\n          this.tokenTimer = setTimeout(() => {\n            this.logout();\n          }, expiresIn);\n          this.authStatusListener.next(true);\n        }\n      }\n    }\n\n    login(form) {\n      var _this = this;\n\n      console.log(\"api url :: \", usersURL);\n      this.http.post(usersURL + 'login', form).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resp) {\n          if (resp) {\n            console.log('login res ::', resp);\n            _this.token = resp.data.token;\n\n            if (_this.token != null) {\n              let expirationDate = _this.getExpirationDate(resp.data.expiresIn);\n\n              _this.saveAuthData(resp.data, expirationDate);\n\n              _this.tokenTimer = setTimeout(() => {\n                _this.logout();\n              }, resp.data.expiresIn * 1000);\n\n              _this.authStatusListener.next(true);\n\n              _this.authStatus = true;\n\n              _this.router.navigate(['']);\n            }\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(), err => {\n        console.log(err); // console.log(\"geetaaa\", err);\n        // this.authStatusListener.next(false);\n      });\n    }\n\n    logout() {\n      this.token = null;\n      this.authStatus = false;\n      this.authStatusListener.next(false);\n      clearTimeout(this.tokenTimer);\n      localStorage.clear();\n      this.router.navigate(['/auth/login']);\n    }\n\n    saveAuthData(obj, expirationDate) {\n      localStorage.setItem('expirationDate', expirationDate.toISOString());\n      localStorage.setItem('mobile', obj.mobile);\n      localStorage.setItem('token', obj.token);\n      localStorage.setItem('email', obj.email);\n      localStorage.setItem('userId', obj.userId);\n    }\n\n    getAuthData() {\n      if (localStorage.getItem(\"token\") && localStorage.getItem(\"expirationDate\")) return {\n        token: localStorage.getItem(\"token\"),\n        expirationDate: localStorage.getItem(\"expirationDate\")\n      };\n      return false;\n    }\n\n    getExpirationDate(expiresIn) {\n      let now = new Date();\n      return new Date(now.getTime() + expiresIn * 1000);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}