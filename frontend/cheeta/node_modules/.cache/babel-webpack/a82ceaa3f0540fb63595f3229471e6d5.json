{"ast":null,"code":"import _asyncToGenerator from \"/home/meghna/mogi/kube-mogi/cheeta/frontend/cheeta/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Subject } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport { NotificationsComponent } from \"../notifications/notifications.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/dialog\";\nconst usersURL = environment.cheetaUserURL;\nexport class AuthService {\n  constructor(http, router, dialog) {\n    this.http = http;\n    this.router = router;\n    this.dialog = dialog;\n    this.token = null;\n    this.tokenTimer = null;\n    this.authStatusListener = new Subject();\n    this.authStatus = false;\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n\n  getAuthStatus() {\n    return this.authStatus;\n  }\n\n  register(regData) {\n    console.log(\"api url\", usersURL);\n    this.http.post(usersURL, regData).subscribe(resp => {\n      console.log(\"lolz ::: new resopnse\", resp);\n      console.log(\"userId::\", resp.data.userId);\n\n      if (resp && resp.status && resp.status.code == 200) {\n        this.router.navigate(['/auth/verifyOTP'], {\n          queryParams: {\n            email: resp.data.email,\n            userId: resp.data.userId\n          }\n        });\n      }\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  verifyOtp(otpData) {\n    console.log('verfying otp', otpData);\n    this.http.post(usersURL + \"/verifyOTP\", otpData).subscribe(resp => {\n      console.log(\"lolz ::: new resopnse\", resp);\n      if (resp && resp.status && resp.status.code == 200) this.router.navigate(['/auth/login']);\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  autoAuthUser() {\n    const authInfo = this.getAuthData();\n\n    if (authInfo) {\n      let expiresIn = new Date(authInfo.expirationDate).getTime() - new Date().getTime();\n\n      if (expiresIn > 0) {\n        this.token = authInfo.token;\n        this.authStatus = true;\n        this.tokenTimer = setTimeout(() => {\n          this.logout();\n        }, expiresIn);\n        this.authStatusListener.next(true);\n      }\n    }\n  }\n\n  login(form) {\n    var _this = this;\n\n    console.log(\"api url :: \", usersURL);\n    this.http.post(usersURL + 'login', form).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (resp) {\n        if (resp) {\n          console.log('login res ::', resp);\n          _this.token = resp.data.token;\n\n          if (_this.token != null) {\n            let expirationDate = _this.getExpirationDate(resp.data.expiresIn);\n\n            _this.saveAuthData(resp.data, expirationDate);\n\n            _this.tokenTimer = setTimeout(() => {\n              _this.logout();\n            }, resp.data.expiresIn * 1000);\n\n            _this.authStatusListener.next(true);\n\n            _this.authStatus = true;\n\n            _this.router.navigate(['']);\n          }\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(), err => {\n      console.log(err); // console.log(\"geetaaa\", err);\n      // this.authStatusListener.next(false);\n    });\n  }\n\n  logout() {\n    this.token = null;\n    this.authStatus = false;\n    this.authStatusListener.next(false);\n    clearTimeout(this.tokenTimer);\n    localStorage.clear();\n    this.router.navigate(['/auth/login']);\n  }\n\n  saveAuthData(obj, expirationDate) {\n    localStorage.setItem('expirationDate', expirationDate.toISOString());\n    localStorage.setItem('mobile', obj.mobile);\n    localStorage.setItem('token', obj.token);\n    localStorage.setItem('email', obj.email);\n    localStorage.setItem('userId', obj.userId);\n  }\n\n  getAuthData() {\n    if (localStorage.getItem(\"token\") && localStorage.getItem(\"expirationDate\")) return {\n      token: localStorage.getItem(\"token\"),\n      expirationDate: localStorage.getItem(\"expirationDate\")\n    };\n    return false;\n  }\n\n  getExpirationDate(expiresIn) {\n    let now = new Date();\n    return new Date(now.getTime() + expiresIn * 1000);\n  }\n\n  resendOtp(email) {\n    console.log(email);\n    return new Promise((resolve, reject) => {\n      try {\n        this.http.post(usersURL + '/forgetPassword', {\n          email\n        }).subscribe(resp => {\n          console.log(\"resp of send otp for pass forget\", resp);\n\n          if (resp && resp.status.code == 200) {\n            console.log('OTP sent');\n          }\n\n          resolve(resp);\n        }, error => {\n          console.log(error);\n        });\n      } catch (err) {\n        console.log(\"inside catch err\", err);\n        reject(err);\n      }\n    });\n  }\n\n  changePassword(data) {\n    console.log(\"data\", data);\n    return new Promise((resolve, reject) => {\n      try {\n        this.http.post(usersURL + '/newPassword', data).subscribe(resp => {\n          console.log(resp);\n          console.log(resp.status);\n\n          if (resp && resp['status'] && resp['status'].code == 200) {\n            this.openDialog(' Your Password has been Updated');\n            this.router.navigate(['/auth/login']);\n          }\n        }, error => {\n          console.log(error);\n        });\n      } catch (err) {\n        console.log(\"inside catch err of resetPass\", err);\n        reject(err);\n      }\n    });\n  }\n\n  openDialog(warning) {\n    const dialogRef = this.dialog.open(NotificationsComponent, {\n      data: warning\n    });\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatDialog));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/meghna/mogi/kube-mogi/cheeta/frontend/cheeta/src/app/pages/auth/auth.service.ts"],"names":["Subject","environment","NotificationsComponent","i0","i1","i2","i3","usersURL","cheetaUserURL","AuthService","constructor","http","router","dialog","token","tokenTimer","authStatusListener","authStatus","getToken","getAuthStatusListener","asObservable","getAuthStatus","register","regData","console","log","post","subscribe","resp","data","userId","status","code","navigate","queryParams","email","error","verifyOtp","otpData","autoAuthUser","authInfo","getAuthData","expiresIn","Date","expirationDate","getTime","setTimeout","logout","next","login","form","getExpirationDate","saveAuthData","err","clearTimeout","localStorage","clear","obj","setItem","toISOString","mobile","getItem","now","resendOtp","Promise","resolve","reject","changePassword","openDialog","warning","dialogRef","open","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","Router","MatDialog","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { Subject } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport { NotificationsComponent } from \"../notifications/notifications.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/dialog\";\nconst usersURL = environment.cheetaUserURL;\nexport class AuthService {\n    constructor(http, router, dialog) {\n        this.http = http;\n        this.router = router;\n        this.dialog = dialog;\n        this.token = null;\n        this.tokenTimer = null;\n        this.authStatusListener = new Subject();\n        this.authStatus = false;\n    }\n    getToken() {\n        return this.token;\n    }\n    getAuthStatusListener() {\n        return this.authStatusListener.asObservable();\n    }\n    getAuthStatus() {\n        return this.authStatus;\n    }\n    register(regData) {\n        console.log(\"api url\", usersURL);\n        this.http\n            .post(usersURL, regData)\n            .subscribe((resp) => {\n            console.log(\"lolz ::: new resopnse\", resp);\n            console.log(\"userId::\", resp.data.userId);\n            if (resp && resp.status && resp.status.code == 200) {\n                this.router.navigate(['/auth/verifyOTP'], { queryParams: { email: resp.data.email, userId: resp.data.userId } });\n            }\n        }, error => {\n            console.log(error);\n        });\n    }\n    verifyOtp(otpData) {\n        console.log('verfying otp', otpData);\n        this.http\n            .post(usersURL + \"/verifyOTP\", otpData)\n            .subscribe((resp) => {\n            console.log(\"lolz ::: new resopnse\", resp);\n            if (resp && resp.status && resp.status.code == 200)\n                this.router.navigate(['/auth/login']);\n        }, error => {\n            console.log(error);\n        });\n    }\n    autoAuthUser() {\n        const authInfo = this.getAuthData();\n        if (authInfo) {\n            let expiresIn = new Date(authInfo.expirationDate).getTime() - (new Date()).getTime();\n            if (expiresIn > 0) {\n                this.token = authInfo.token;\n                this.authStatus = true;\n                this.tokenTimer = setTimeout(() => {\n                    this.logout();\n                }, expiresIn);\n                this.authStatusListener.next(true);\n            }\n        }\n    }\n    login(form) {\n        console.log(\"api url :: \", usersURL);\n        this.http\n            .post(usersURL + 'login', form)\n            .subscribe(async (resp) => {\n            if (resp) {\n                console.log('login res ::', resp);\n                this.token = resp.data.token;\n                if (this.token != null) {\n                    let expirationDate = this.getExpirationDate(resp.data.expiresIn);\n                    this.saveAuthData(resp.data, expirationDate);\n                    this.tokenTimer = setTimeout(() => {\n                        this.logout();\n                    }, resp.data.expiresIn * 1000);\n                    this.authStatusListener.next(true);\n                    this.authStatus = true;\n                    this.router.navigate(['']);\n                }\n            }\n        }, err => {\n            console.log(err);\n            // console.log(\"geetaaa\", err);\n            // this.authStatusListener.next(false);\n        });\n    }\n    logout() {\n        this.token = null;\n        this.authStatus = false;\n        this.authStatusListener.next(false);\n        clearTimeout(this.tokenTimer);\n        localStorage.clear();\n        this.router.navigate(['/auth/login']);\n    }\n    saveAuthData(obj, expirationDate) {\n        localStorage.setItem('expirationDate', expirationDate.toISOString());\n        localStorage.setItem('mobile', obj.mobile);\n        localStorage.setItem('token', obj.token);\n        localStorage.setItem('email', obj.email);\n        localStorage.setItem('userId', obj.userId);\n    }\n    getAuthData() {\n        if (localStorage.getItem(\"token\") &&\n            localStorage.getItem(\"expirationDate\"))\n            return {\n                token: localStorage.getItem(\"token\"),\n                expirationDate: localStorage.getItem(\"expirationDate\")\n            };\n        return false;\n    }\n    getExpirationDate(expiresIn) {\n        let now = new Date();\n        return new Date(now.getTime() + expiresIn * 1000);\n    }\n    resendOtp(email) {\n        console.log(email);\n        return new Promise((resolve, reject) => {\n            try {\n                this.http\n                    .post(usersURL + '/forgetPassword', { email })\n                    .subscribe((resp) => {\n                    console.log(\"resp of send otp for pass forget\", resp);\n                    if (resp && resp.status.code == 200) {\n                        console.log('OTP sent');\n                    }\n                    resolve(resp);\n                }, error => {\n                    console.log(error);\n                });\n            }\n            catch (err) {\n                console.log(\"inside catch err\", err);\n                reject(err);\n            }\n        });\n    }\n    changePassword(data) {\n        console.log(\"data\", data);\n        return new Promise((resolve, reject) => {\n            try {\n                this.http\n                    .post(usersURL + '/newPassword', data)\n                    .subscribe((resp) => {\n                    console.log(resp);\n                    console.log(resp.status);\n                    if (resp && resp['status'] && resp['status'].code == 200) {\n                        this.openDialog(' Your Password has been Updated');\n                        this.router.navigate(['/auth/login']);\n                    }\n                }, error => {\n                    console.log(error);\n                });\n            }\n            catch (err) {\n                console.log(\"inside catch err of resetPass\", err);\n                reject(err);\n            }\n        });\n    }\n    openDialog(warning) {\n        const dialogRef = this.dialog.open(NotificationsComponent, {\n            data: warning,\n        });\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatDialog)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}