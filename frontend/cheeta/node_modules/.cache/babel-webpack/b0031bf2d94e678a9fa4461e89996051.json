{"ast":null,"code":"import _asyncToGenerator from \"/home/meghna/mogi/kube-mogi/cheeta/frontend/cheeta/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { environment } from 'src/environments/environment';\nimport { CreateValidation } from '../validations/validation-instance';\nlet CreateTicketComponent = class CreateTicketComponent {\n  constructor(dialogRef, cheetaTicketService, cheetaUserService, data) {\n    this.dialogRef = dialogRef;\n    this.cheetaTicketService = cheetaTicketService;\n    this.cheetaUserService = cheetaUserService;\n    this.data = data; //ngModel names used for form\n\n    this.createTicket = {\n      title: '',\n      description: '',\n      projectName: '',\n      priority: '',\n      type: '',\n      files: [],\n      expectedTime: '',\n      UT: false,\n      documentation: false,\n      testDoneBy: '',\n      tags: [],\n      projectType: '',\n      msg: '',\n      user: ''\n    };\n    this.members = []; //for validation\n\n    this.titleValidation = new CreateValidation();\n    this.descriptionValidation = new CreateValidation();\n    this.priorityValidation = new CreateValidation(); //for array list from environments\n\n    this.projectNameArr = environment.projectNameArray;\n    this.membersArr = [];\n    this.addOn = false;\n    this.advanceOn = false;\n    this.edit = false;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let res = yield _this.cheetaUserService.getUsersList();\n      if (res && res.length) _this.membersArr = res; // console.log(this.membersArr)\n\n      if (_this.data.edit) {\n        _this.createTicket = Object.assign({}, _this.data.ticketInfo);\n      }\n\n      console.log(_this.data);\n    })();\n  }\n\n  onCreate() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const ticket = {\n        title: _this2.createTicket.title,\n        description: _this2.createTicket.description,\n        priority: _this2.createTicket.priority // projectName: this.createTicket.projectName,\n        // tags: [\n        //   this.createTicket.projectType + this.createTicket.projectName\n        // ],\n        // type: this.createTicket.type,\n        // files: this.createTicket.files,\n        // members: this.members,\n        // comments: [\n        //   {\n        //     user: this.createTicket.user,\n        //     msg: this.createTicket.msg\n        //   }\n        // ],\n        // UT : this.createTicket.UT,\n        // documentation : this.createTicket.documentation,\n        // expectedTime: this.createTicket.expectedTime,\n\n      };\n      console.log(\"ticket info ::\", ticket);\n\n      if (ticket.title && ticket.description && ticket.priority) {\n        let res;\n        if (!_this2.data.edit) res = yield _this2.cheetaTicketService.addTicket(ticket);else res = yield _this2.cheetaTicketService.updateTicket(_this2.data.ticketInfo._id, ticket); // Add a toaster for Success msg and failure msgs accordingly\n        // in place of alerts!!!!!!!!\n\n        if (res) alert(\"Created Successfully!\");\n\n        _this2.dialogRef.close();\n      } else {\n        alert('Invalid Details!');\n        return;\n      }\n    })();\n  }\n\n  addMember(ele) {\n    let element = ele.target;\n    let flag = 0;\n    this.members.forEach(e => {\n      if (e.userId == element.value) flag++;\n    });\n    if (flag) return;\n    this.membersArr.forEach(e => {\n      if (e._id == element.value) this.members.push({\n        name: e.name,\n        email: e.email,\n        userId: e._id,\n        type: e.type\n      });\n    });\n    console.log(this.members);\n  }\n\n  remove(member) {\n    const index = this.members.indexOf(member);\n\n    if (index >= 0) {\n      this.members.splice(index, 1);\n    }\n  }\n\n  onValidation() {\n    this.titleValidation.errorMessage = \"This field is required\";\n    this.descriptionValidation.errorMessage = \"This field is required\";\n    this.priorityValidation.errorMessage = \"this field is required\";\n  }\n\n};\nCreateTicketComponent = __decorate([Component({\n  selector: 'app-create-ticket',\n  templateUrl: './create-ticket.component.html',\n  styleUrls: ['./create-ticket.component.scss']\n}), __param(3, Inject(MAT_DIALOG_DATA))], CreateTicketComponent);\nexport { CreateTicketComponent };","map":{"version":3,"sources":["/home/meghna/mogi/kube-mogi/cheeta/frontend/cheeta/src/app/pages/create-ticket/create-ticket.component.ts"],"names":["__decorate","__param","Component","Inject","MAT_DIALOG_DATA","environment","CreateValidation","CreateTicketComponent","constructor","dialogRef","cheetaTicketService","cheetaUserService","data","createTicket","title","description","projectName","priority","type","files","expectedTime","UT","documentation","testDoneBy","tags","projectType","msg","user","members","titleValidation","descriptionValidation","priorityValidation","projectNameArr","projectNameArray","membersArr","addOn","advanceOn","edit","ngOnInit","res","getUsersList","length","Object","assign","ticketInfo","console","log","onCreate","ticket","addTicket","updateTicket","_id","alert","close","addMember","ele","element","target","flag","forEach","e","userId","value","push","name","email","remove","member","index","indexOf","splice","onValidation","errorMessage","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,eAAlC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,IAAIC,qBAAqB,GAAG,MAAMA,qBAAN,CAA4B;AACpDC,EAAAA,WAAW,CAACC,SAAD,EAAYC,mBAAZ,EAAiCC,iBAAjC,EAAoDC,IAApD,EAA0D;AACjE,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,IAAL,GAAYA,IAAZ,CAJiE,CAKjE;;AACA,SAAKC,YAAL,GAAoB;AAChBC,MAAAA,KAAK,EAAE,EADS;AAEhBC,MAAAA,WAAW,EAAE,EAFG;AAGhBC,MAAAA,WAAW,EAAE,EAHG;AAIhBC,MAAAA,QAAQ,EAAE,EAJM;AAKhBC,MAAAA,IAAI,EAAE,EALU;AAMhBC,MAAAA,KAAK,EAAE,EANS;AAOhBC,MAAAA,YAAY,EAAE,EAPE;AAQhBC,MAAAA,EAAE,EAAE,KARY;AAShBC,MAAAA,aAAa,EAAE,KATC;AAUhBC,MAAAA,UAAU,EAAE,EAVI;AAWhBC,MAAAA,IAAI,EAAE,EAXU;AAYhBC,MAAAA,WAAW,EAAE,EAZG;AAahBC,MAAAA,GAAG,EAAE,EAbW;AAchBC,MAAAA,IAAI,EAAE;AAdU,KAApB;AAgBA,SAAKC,OAAL,GAAe,EAAf,CAtBiE,CAuBjE;;AACA,SAAKC,eAAL,GAAuB,IAAIvB,gBAAJ,EAAvB;AACA,SAAKwB,qBAAL,GAA6B,IAAIxB,gBAAJ,EAA7B;AACA,SAAKyB,kBAAL,GAA0B,IAAIzB,gBAAJ,EAA1B,CA1BiE,CA2BjE;;AACA,SAAK0B,cAAL,GAAsB3B,WAAW,CAAC4B,gBAAlC;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,IAAL,GAAY,KAAZ;AACH;;AACKC,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,UAAIC,GAAG,SAAS,KAAI,CAAC5B,iBAAL,CAAuB6B,YAAvB,EAAhB;AACA,UAAID,GAAG,IAAIA,GAAG,CAACE,MAAf,EACI,KAAI,CAACP,UAAL,GAAkBK,GAAlB,CAHS,CAIb;;AACA,UAAI,KAAI,CAAC3B,IAAL,CAAUyB,IAAd,EAAoB;AAChB,QAAA,KAAI,CAACxB,YAAL,GAAoB6B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAI,CAAC/B,IAAL,CAAUgC,UAA5B,CAApB;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAAClC,IAAjB;AARa;AAShB;;AACKmC,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,YAAMC,MAAM,GAAG;AACXlC,QAAAA,KAAK,EAAE,MAAI,CAACD,YAAL,CAAkBC,KADd;AAEXC,QAAAA,WAAW,EAAE,MAAI,CAACF,YAAL,CAAkBE,WAFpB;AAGXE,QAAAA,QAAQ,EAAE,MAAI,CAACJ,YAAL,CAAkBI,QAHjB,CAIX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBW,OAAf;AAqBA4B,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BE,MAA9B;;AACA,UAAIA,MAAM,CAAClC,KAAP,IAAgBkC,MAAM,CAACjC,WAAvB,IAAsCiC,MAAM,CAAC/B,QAAjD,EAA2D;AACvD,YAAIsB,GAAJ;AACA,YAAI,CAAC,MAAI,CAAC3B,IAAL,CAAUyB,IAAf,EACIE,GAAG,SAAS,MAAI,CAAC7B,mBAAL,CAAyBuC,SAAzB,CAAmCD,MAAnC,CAAZ,CADJ,KAGIT,GAAG,SAAS,MAAI,CAAC7B,mBAAL,CAAyBwC,YAAzB,CAAsC,MAAI,CAACtC,IAAL,CAAUgC,UAAV,CAAqBO,GAA3D,EAAgEH,MAAhE,CAAZ,CALmD,CAMvD;AACA;;AACA,YAAIT,GAAJ,EACIa,KAAK,CAAC,uBAAD,CAAL;;AACJ,QAAA,MAAI,CAAC3C,SAAL,CAAe4C,KAAf;AACH,OAXD,MAYK;AACDD,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACA;AACH;AAtCY;AAuChB;;AACDE,EAAAA,SAAS,CAACC,GAAD,EAAM;AACX,QAAIC,OAAO,GAAGD,GAAG,CAACE,MAAlB;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,SAAK9B,OAAL,CAAa+B,OAAb,CAAqBC,CAAC,IAAI;AACtB,UAAIA,CAAC,CAACC,MAAF,IAAYL,OAAO,CAACM,KAAxB,EACIJ,IAAI;AACX,KAHD;AAIA,QAAIA,IAAJ,EACI;AACJ,SAAKxB,UAAL,CAAgByB,OAAhB,CAAwBC,CAAC,IAAI;AACzB,UAAIA,CAAC,CAACT,GAAF,IAASK,OAAO,CAACM,KAArB,EACI,KAAKlC,OAAL,CAAamC,IAAb,CAAkB;AACdC,QAAAA,IAAI,EAAEJ,CAAC,CAACI,IADM;AAEdC,QAAAA,KAAK,EAAEL,CAAC,CAACK,KAFK;AAGdJ,QAAAA,MAAM,EAAED,CAAC,CAACT,GAHI;AAIdjC,QAAAA,IAAI,EAAE0C,CAAC,CAAC1C;AAJM,OAAlB;AAMP,KARD;AASA2B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,OAAjB;AACH;;AACDsC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,UAAMC,KAAK,GAAG,KAAKxC,OAAL,CAAayC,OAAb,CAAqBF,MAArB,CAAd;;AACA,QAAIC,KAAK,IAAI,CAAb,EAAgB;AACZ,WAAKxC,OAAL,CAAa0C,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AACH;AACJ;;AACDG,EAAAA,YAAY,GAAG;AACX,SAAK1C,eAAL,CAAqB2C,YAArB,GAAoC,wBAApC;AACA,SAAK1C,qBAAL,CAA2B0C,YAA3B,GAA0C,wBAA1C;AACA,SAAKzC,kBAAL,CAAwByC,YAAxB,GAAuC,wBAAvC;AACH;;AAnHmD,CAAxD;AAqHAjE,qBAAqB,GAAGP,UAAU,CAAC,CAC/BE,SAAS,CAAC;AACNuE,EAAAA,QAAQ,EAAE,mBADJ;AAENC,EAAAA,WAAW,EAAE,gCAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,gCAAD;AAHL,CAAD,CADsB,EAM/B1E,OAAO,CAAC,CAAD,EAAIE,MAAM,CAACC,eAAD,CAAV,CANwB,CAAD,EAO/BG,qBAP+B,CAAlC;AAQA,SAASA,qBAAT","sourcesContent":["import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { environment } from 'src/environments/environment';\nimport { CreateValidation } from '../validations/validation-instance';\nlet CreateTicketComponent = class CreateTicketComponent {\n    constructor(dialogRef, cheetaTicketService, cheetaUserService, data) {\n        this.dialogRef = dialogRef;\n        this.cheetaTicketService = cheetaTicketService;\n        this.cheetaUserService = cheetaUserService;\n        this.data = data;\n        //ngModel names used for form\n        this.createTicket = {\n            title: '',\n            description: '',\n            projectName: '',\n            priority: '',\n            type: '',\n            files: [],\n            expectedTime: '',\n            UT: false,\n            documentation: false,\n            testDoneBy: '',\n            tags: [],\n            projectType: '',\n            msg: '',\n            user: '',\n        };\n        this.members = [];\n        //for validation\n        this.titleValidation = new CreateValidation();\n        this.descriptionValidation = new CreateValidation();\n        this.priorityValidation = new CreateValidation();\n        //for array list from environments\n        this.projectNameArr = environment.projectNameArray;\n        this.membersArr = [];\n        this.addOn = false;\n        this.advanceOn = false;\n        this.edit = false;\n    }\n    async ngOnInit() {\n        let res = await this.cheetaUserService.getUsersList();\n        if (res && res.length)\n            this.membersArr = res;\n        // console.log(this.membersArr)\n        if (this.data.edit) {\n            this.createTicket = Object.assign({}, this.data.ticketInfo);\n        }\n        console.log(this.data);\n    }\n    async onCreate() {\n        const ticket = {\n            title: this.createTicket.title,\n            description: this.createTicket.description,\n            priority: this.createTicket.priority,\n            // projectName: this.createTicket.projectName,\n            // tags: [\n            //   this.createTicket.projectType + this.createTicket.projectName\n            // ],\n            // type: this.createTicket.type,\n            // files: this.createTicket.files,\n            // members: this.members,\n            // comments: [\n            //   {\n            //     user: this.createTicket.user,\n            //     msg: this.createTicket.msg\n            //   }\n            // ],\n            // UT : this.createTicket.UT,\n            // documentation : this.createTicket.documentation,\n            // expectedTime: this.createTicket.expectedTime,\n        };\n        console.log(\"ticket info ::\", ticket);\n        if (ticket.title && ticket.description && ticket.priority) {\n            let res;\n            if (!this.data.edit)\n                res = await this.cheetaTicketService.addTicket(ticket);\n            else\n                res = await this.cheetaTicketService.updateTicket(this.data.ticketInfo._id, ticket);\n            // Add a toaster for Success msg and failure msgs accordingly\n            // in place of alerts!!!!!!!!\n            if (res)\n                alert(\"Created Successfully!\");\n            this.dialogRef.close();\n        }\n        else {\n            alert('Invalid Details!');\n            return;\n        }\n    }\n    addMember(ele) {\n        let element = ele.target;\n        let flag = 0;\n        this.members.forEach(e => {\n            if (e.userId == element.value)\n                flag++;\n        });\n        if (flag)\n            return;\n        this.membersArr.forEach(e => {\n            if (e._id == element.value)\n                this.members.push({\n                    name: e.name,\n                    email: e.email,\n                    userId: e._id,\n                    type: e.type\n                });\n        });\n        console.log(this.members);\n    }\n    remove(member) {\n        const index = this.members.indexOf(member);\n        if (index >= 0) {\n            this.members.splice(index, 1);\n        }\n    }\n    onValidation() {\n        this.titleValidation.errorMessage = \"This field is required\";\n        this.descriptionValidation.errorMessage = \"This field is required\";\n        this.priorityValidation.errorMessage = \"this field is required\";\n    }\n};\nCreateTicketComponent = __decorate([\n    Component({\n        selector: 'app-create-ticket',\n        templateUrl: './create-ticket.component.html',\n        styleUrls: ['./create-ticket.component.scss']\n    }),\n    __param(3, Inject(MAT_DIALOG_DATA))\n], CreateTicketComponent);\nexport { CreateTicketComponent };\n"]},"metadata":{},"sourceType":"module"}