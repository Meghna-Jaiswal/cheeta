{"ast":null,"code":"import _asyncToGenerator from \"/home/meghna/mogi/kube-mogi/cheeta/frontend/cheeta/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./cheetaUsers.service\";\nconst TICKET_BASE_URL = environment.ticketUrl;\nexport class CheetaTicketService {\n  constructor(http, router, cheetaUserService) {\n    this.http = http;\n    this.router = router;\n    this.cheetaUserService = cheetaUserService;\n    this.ticketUpdated = new Subject(); //function used in home page forshowing all ticketsummary table\n\n    this.ticketSummary = [];\n    this.cacheTime = 5000;\n  }\n\n  getTicketUpdateListener() {\n    return this.ticketUpdated.asObservable();\n  } //this ir to create a ticket from create option\n\n\n  addTicket(ticket) {\n    var _this = this;\n\n    return new Promise((resolve, reject) => {\n      try {\n        const userDetails = this.cheetaUserService.getUserData(); // ticket['user'] = {\n        //   userId: localStorage.getItem('userId'),\n        //   type: userDetails.data.type,\n        //   email: userDetails.data.email,\n        //   name: userDetails.data.name,\n        //   profilePic: userDetails.data.profilePic\n        // }\n\n        console.log(ticket);\n        this.http.post(TICKET_BASE_URL + 'createTicket', ticket).subscribe( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (res) {\n            _this.ticketUpdated.next(1);\n\n            resolve(res);\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      } catch (err) {}\n    });\n  } //this is for getting all tickets from backend to kan ban page\n\n\n  getTickets(filters) {\n    console.log(filters);\n    return new Promise((resolve, reject) => {\n      try {\n        this.http.post(TICKET_BASE_URL + \"getTickets\", filters).subscribe( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (res) {\n            if (res.data && res.data.length) {\n              resolve(res.data);\n            } else resolve([]);\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  } //changes state of a ticket in kanban saction from backlog to development or deployment or done\n\n\n  updateTicketState(ticket, changes) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        try {\n          _this2.http.put(TICKET_BASE_URL + 'changeTicketState/' + ticket._id, changes).subscribe(res => {\n            console.log(res);\n            if (res && res.data) resolve(res);else reject('User not allowed to make this change!');\n          });\n        } catch (err) {\n          console.log(err);\n          reject(err);\n        }\n      });\n    })();\n  } //function to delete tickets\n\n\n  deleteTicket(eventId) {\n    var _this3 = this;\n\n    console.log(eventId);\n    return new Promise((resolve, reject) => {\n      try {\n        this.http.delete(TICKET_BASE_URL + 'deleteTicket/' + eventId).subscribe( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (res) {\n            _this3.ticketUpdated.next(1);\n\n            resolve(res);\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      } catch (err) {\n        reject(err);\n      }\n    });\n  } //function to update ticket details\n\n\n  updateTicket(id, ticket) {\n    var _this4 = this;\n\n    return new Promise((resolve, reject) => {\n      this.http.put(TICKET_BASE_URL + 'updateTicket/' + id, ticket).subscribe( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (res) {\n          _this4.ticketUpdated.next(1);\n\n          resolve(res);\n        });\n\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }(), err => {\n        reject(err);\n      });\n    });\n  }\n\n  searchTicket(term) {\n    return new Promise((resolve, reject) => {\n      this.http.get(TICKET_BASE_URL + 'search?term=' + term).subscribe( /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (res) {\n          // this.ticketUpdated.next(1);\n          // console.log(res)\n          resolve(res.data);\n        });\n\n        return function (_x5) {\n          return _ref5.apply(this, arguments);\n        };\n      }(), err => {\n        reject(err);\n      });\n    });\n  }\n\n  getTicketSummary() {\n    return new Promise((resolve, reject) => {\n      // return resolve(aa)\n      try {\n        if (this.ticketSummary.length > 0) return resolve(this.ticketSummary);\n        this.ticketSummary = [];\n        this.http.get(TICKET_BASE_URL + 'getTicketSummary').subscribe(res => {\n          if (res && res['data']) {\n            // console.log(res);\n            let t;\n            t = res['data'];\n\n            for (let i = 0; i < t.length; i++) {\n              let obj = {};\n              obj['project'] = Object.keys(t[i])[0];\n              obj['backlog'] = [0, 0, 0, 0];\n              obj['development'] = [0, 0, 0, 0];\n              obj['testing'] = [0, 0, 0, 0];\n              obj['done'] = [0, 0, 0, 0];\n\n              for (let j = 0; j < t[i][obj['project']].length; j++) {\n                let a = t[i][obj['project']];\n\n                if (a[j]._id == \"backlog\") {\n                  let count = a[j].ticketsCount;\n\n                  for (let k = 0; k < count.length; k++) {\n                    if (count[k].priority == 'P0' || count[k].priority == 'p0') obj['backlog'][0] = count[k].count;\n                    if (count[k].priority == 'P1' || count[k].priority == 'p1') obj['backlog'][1] = count[k].count;\n                    if (count[k].priority == 'P2' || count[k].priority == 'p2') obj['backlog'][2] = count[k].count;\n                    if (count[k].priority == 'P3' || count[k].priority == 'p3') obj['backlog'][3] = count[k].count;\n                  }\n                }\n\n                if (a[j]._id == \"development\") {\n                  let count = a[j].ticketsCount;\n\n                  for (let k = 0; k < count.length; k++) {\n                    if (count[k].priority == 'P0' || count[k].priority == 'p0') obj['development'][0] = count[k].count;\n                    if (count[k].priority == 'P1' || count[k].priority == 'p1') obj['development'][1] = count[k].count;\n                    if (count[k].priority == 'P2' || count[k].priority == 'p2') obj['development'][2] = count[k].count;\n                    if (count[k].priority == 'P3' || count[k].priority == 'p3') obj['development'][3] = count[k].count;\n                  }\n                }\n\n                if (a[j]._id == \"testing\") {\n                  let count = a[j].ticketsCount;\n\n                  for (let k = 0; k < count.length; k++) {\n                    if (count[k].priority == 'P0' || count[k].priority == 'p0') obj['testing'][0] = count[k].count;\n                    if (count[k].priority == 'P1' || count[k].priority == 'p1') obj['testing'][1] = count[k].count;\n                    if (count[k].priority == 'P2' || count[k].priority == 'p2') obj['testing'][2] = count[k].count;\n                    if (count[k].priority == 'P3' || count[k].priority == 'p3') obj['testing'][3] = count[k].count;\n                  }\n                }\n\n                if (a[j]._id == \"done\") {\n                  let count = a[j].ticketsCount;\n\n                  for (let k = 0; k < count.length; k++) {\n                    if (count[k].priority == 'P0' || count[k].priority == 'p0') obj['done'][0] = count[k].count;\n                    if (count[k].priority == 'P1' || count[k].priority == 'p1') obj['done'][1] = count[k].count;\n                    if (count[k].priority == 'P2' || count[k].priority == 'p2') obj['done'][2] = count[k].count;\n                    if (count[k].priority == 'P3' || count[k].priority == 'p3') obj['done'][3] = count[k].count;\n                  }\n                }\n              }\n\n              this.ticketSummary.push(obj);\n            } // console.log(this.ticketSummary)\n\n\n            setTimeout(() => {\n              this.ticketSummary = [];\n            }, this.cacheTime);\n            return resolve(this.ticketSummary);\n          }\n\n          reject(new Error(\"data is not there\"));\n        }, error => {\n          reject(error);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  }\n\n  onSearch() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let smallTask = [];\n      let bigTask = [];\n      const filters = {\n        members: [localStorage.getItem('userId')]\n      };\n      let result = yield _this5.getTickets(filters);\n      const userDetails = yield _this5.cheetaUserService.getUserData();\n      let userType = \"\";\n      if (userDetails) userType = userDetails.data.type;else return;\n\n      if (userType == 'software-developer') {\n        result.forEach(t => {\n          if (t.state != \"development\") return;\n          if (t.type == 'small') smallTask.push(t);\n          if (t.type == 'big') bigTask.push(t);\n        });\n      } else if (userType == 'quality-analyst') {\n        result.forEach(t => {\n          if (t.state != \"testing\") return;\n          if (t.type == 'small') smallTask.push(t);\n          if (t.type == 'big') bigTask.push(t);\n        });\n      } else {\n        result.forEach(t => {\n          if (t.state == \"deployed\") return;\n          if (t.type == 'small') smallTask.push(t);\n          if (t.type == 'big') bigTask.push(t);\n        });\n      }\n    })();\n  }\n\n}\n\nCheetaTicketService.ɵfac = function CheetaTicketService_Factory(t) {\n  return new (t || CheetaTicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.CheetaUsersService));\n};\n\nCheetaTicketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CheetaTicketService,\n  factory: CheetaTicketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/meghna/mogi/kube-mogi/cheeta/frontend/cheeta/src/app/service/cheetaTicket.service.ts"],"names":["Subject","environment","i0","i1","i2","i3","TICKET_BASE_URL","ticketUrl","CheetaTicketService","constructor","http","router","cheetaUserService","ticketUpdated","ticketSummary","cacheTime","getTicketUpdateListener","asObservable","addTicket","ticket","Promise","resolve","reject","userDetails","getUserData","console","log","post","subscribe","res","next","err","getTickets","filters","data","length","updateTicketState","changes","put","_id","deleteTicket","eventId","delete","updateTicket","id","searchTicket","term","get","getTicketSummary","t","i","obj","Object","keys","j","a","count","ticketsCount","k","priority","push","setTimeout","Error","error","onSearch","smallTask","bigTask","members","localStorage","getItem","result","userType","type","forEach","state","ɵfac","CheetaTicketService_Factory","ɵɵinject","HttpClient","Router","CheetaUsersService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./cheetaUsers.service\";\nconst TICKET_BASE_URL = environment.ticketUrl;\nexport class CheetaTicketService {\n    constructor(http, router, cheetaUserService) {\n        this.http = http;\n        this.router = router;\n        this.cheetaUserService = cheetaUserService;\n        this.ticketUpdated = new Subject();\n        //function used in home page forshowing all ticketsummary table\n        this.ticketSummary = [];\n        this.cacheTime = 5000;\n    }\n    getTicketUpdateListener() {\n        return this.ticketUpdated.asObservable();\n    }\n    //this ir to create a ticket from create option\n    addTicket(ticket) {\n        return new Promise((resolve, reject) => {\n            try {\n                const userDetails = this.cheetaUserService.getUserData();\n                // ticket['user'] = {\n                //   userId: localStorage.getItem('userId'),\n                //   type: userDetails.data.type,\n                //   email: userDetails.data.email,\n                //   name: userDetails.data.name,\n                //   profilePic: userDetails.data.profilePic\n                // }\n                console.log(ticket);\n                this.http\n                    .post(TICKET_BASE_URL + 'createTicket', ticket)\n                    .subscribe(async (res) => {\n                    this.ticketUpdated.next(1);\n                    resolve(res);\n                });\n            }\n            catch (err) {\n            }\n        });\n    }\n    //this is for getting all tickets from backend to kan ban page\n    getTickets(filters) {\n        console.log(filters);\n        return new Promise((resolve, reject) => {\n            try {\n                this.http\n                    .post(TICKET_BASE_URL + \"getTickets\", filters)\n                    .subscribe(async (res) => {\n                    if (res.data && res.data.length) {\n                        resolve(res.data);\n                    }\n                    else\n                        resolve([]);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        });\n    }\n    //changes state of a ticket in kanban saction from backlog to development or deployment or done\n    async updateTicketState(ticket, changes) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.http\n                    .put(TICKET_BASE_URL + 'changeTicketState/' + ticket._id, changes)\n                    .subscribe((res) => {\n                    console.log(res);\n                    if (res && res.data)\n                        resolve(res);\n                    else\n                        reject('User not allowed to make this change!');\n                });\n            }\n            catch (err) {\n                console.log(err);\n                reject(err);\n            }\n        });\n    }\n    //function to delete tickets\n    deleteTicket(eventId) {\n        console.log(eventId);\n        return new Promise((resolve, reject) => {\n            try {\n                this.http\n                    .delete(TICKET_BASE_URL + 'deleteTicket/' + eventId)\n                    .subscribe(async (res) => {\n                    this.ticketUpdated.next(1);\n                    resolve(res);\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    //function to update ticket details\n    updateTicket(id, ticket) {\n        return new Promise((resolve, reject) => {\n            this.http.\n                put(TICKET_BASE_URL + 'updateTicket/' + id, ticket)\n                .subscribe(async (res) => {\n                this.ticketUpdated.next(1);\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    searchTicket(term) {\n        return new Promise((resolve, reject) => {\n            this.http.\n                get(TICKET_BASE_URL + 'search?term=' + term)\n                .subscribe(async (res) => {\n                // this.ticketUpdated.next(1);\n                // console.log(res)\n                resolve(res.data);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    getTicketSummary() {\n        return new Promise((resolve, reject) => {\n            // return resolve(aa)\n            try {\n                if (this.ticketSummary.length > 0)\n                    return resolve(this.ticketSummary);\n                this.ticketSummary = [];\n                this.http\n                    .get(TICKET_BASE_URL + 'getTicketSummary')\n                    .subscribe((res) => {\n                    if (res && res['data']) {\n                        // console.log(res);\n                        let t;\n                        t = res['data'];\n                        for (let i = 0; i < t.length; i++) {\n                            let obj = {};\n                            obj['project'] = Object.keys(t[i])[0];\n                            obj['backlog'] = [0, 0, 0, 0];\n                            obj['development'] = [0, 0, 0, 0];\n                            obj['testing'] = [0, 0, 0, 0];\n                            obj['done'] = [0, 0, 0, 0];\n                            for (let j = 0; j < t[i][obj['project']].length; j++) {\n                                let a = t[i][obj['project']];\n                                if (a[j]._id == \"backlog\") {\n                                    let count = a[j].ticketsCount;\n                                    for (let k = 0; k < count.length; k++) {\n                                        if (count[k].priority == 'P0' || count[k].priority == 'p0')\n                                            obj['backlog'][0] = count[k].count;\n                                        if (count[k].priority == 'P1' || count[k].priority == 'p1')\n                                            obj['backlog'][1] = count[k].count;\n                                        if (count[k].priority == 'P2' || count[k].priority == 'p2')\n                                            obj['backlog'][2] = count[k].count;\n                                        if (count[k].priority == 'P3' || count[k].priority == 'p3')\n                                            obj['backlog'][3] = count[k].count;\n                                    }\n                                }\n                                if (a[j]._id == \"development\") {\n                                    let count = a[j].ticketsCount;\n                                    for (let k = 0; k < count.length; k++) {\n                                        if (count[k].priority == 'P0' || count[k].priority == 'p0')\n                                            obj['development'][0] = count[k].count;\n                                        if (count[k].priority == 'P1' || count[k].priority == 'p1')\n                                            obj['development'][1] = count[k].count;\n                                        if (count[k].priority == 'P2' || count[k].priority == 'p2')\n                                            obj['development'][2] = count[k].count;\n                                        if (count[k].priority == 'P3' || count[k].priority == 'p3')\n                                            obj['development'][3] = count[k].count;\n                                    }\n                                }\n                                if (a[j]._id == \"testing\") {\n                                    let count = a[j].ticketsCount;\n                                    for (let k = 0; k < count.length; k++) {\n                                        if (count[k].priority == 'P0' || count[k].priority == 'p0')\n                                            obj['testing'][0] = count[k].count;\n                                        if (count[k].priority == 'P1' || count[k].priority == 'p1')\n                                            obj['testing'][1] = count[k].count;\n                                        if (count[k].priority == 'P2' || count[k].priority == 'p2')\n                                            obj['testing'][2] = count[k].count;\n                                        if (count[k].priority == 'P3' || count[k].priority == 'p3')\n                                            obj['testing'][3] = count[k].count;\n                                    }\n                                }\n                                if (a[j]._id == \"done\") {\n                                    let count = a[j].ticketsCount;\n                                    for (let k = 0; k < count.length; k++) {\n                                        if (count[k].priority == 'P0' || count[k].priority == 'p0')\n                                            obj['done'][0] = count[k].count;\n                                        if (count[k].priority == 'P1' || count[k].priority == 'p1')\n                                            obj['done'][1] = count[k].count;\n                                        if (count[k].priority == 'P2' || count[k].priority == 'p2')\n                                            obj['done'][2] = count[k].count;\n                                        if (count[k].priority == 'P3' || count[k].priority == 'p3')\n                                            obj['done'][3] = count[k].count;\n                                    }\n                                }\n                            }\n                            this.ticketSummary.push(obj);\n                        }\n                        // console.log(this.ticketSummary)\n                        setTimeout(() => { this.ticketSummary = []; }, this.cacheTime);\n                        return resolve(this.ticketSummary);\n                    }\n                    reject(new Error(\"data is not there\"));\n                }, error => {\n                    reject(error);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        });\n    }\n    async onSearch() {\n        let smallTask = [];\n        let bigTask = [];\n        const filters = {\n            members: [localStorage.getItem('userId')]\n        };\n        let result = await this.getTickets(filters);\n        const userDetails = await this.cheetaUserService.getUserData();\n        let userType = \"\";\n        if (userDetails)\n            userType = userDetails.data.type;\n        else\n            return;\n        if (userType == 'software-developer') {\n            result.forEach((t) => {\n                if (t.state != \"development\")\n                    return;\n                if (t.type == 'small')\n                    smallTask.push(t);\n                if (t.type == 'big')\n                    bigTask.push(t);\n            });\n        }\n        else if (userType == 'quality-analyst') {\n            result.forEach((t) => {\n                if (t.state != \"testing\")\n                    return;\n                if (t.type == 'small')\n                    smallTask.push(t);\n                if (t.type == 'big')\n                    bigTask.push(t);\n            });\n        }\n        else {\n            result.forEach((t) => {\n                if (t.state == \"deployed\")\n                    return;\n                if (t.type == 'small')\n                    smallTask.push(t);\n                if (t.type == 'big')\n                    bigTask.push(t);\n            });\n        }\n    }\n}\nCheetaTicketService.ɵfac = function CheetaTicketService_Factory(t) { return new (t || CheetaTicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.CheetaUsersService)); };\nCheetaTicketService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CheetaTicketService, factory: CheetaTicketService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}